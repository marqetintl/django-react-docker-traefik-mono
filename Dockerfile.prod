
FROM node:19-alpine3.16 as base

# set work directory
WORKDIR /app

# install dependencies
COPY ./client/package.json ./client/package.json

COPY ./client/yarn.lock ./client/yarn.lock
COPY ./client/.yarnrc.yml ./client/.yarnrc.yml
COPY ./client/.yarn/ ./client/.yarn/

RUN yarn 

COPY ./client/tsconfig.node.json ./client/tsconfig.node.json
COPY ./client/tsconfig.json ./client/tsconfig.json

COPY ./client/vite.config.ts ./client/vite.config.ts

# copy project
COPY ./client/ ./client

RUN cd ./client && yarn build


FROM python:3.11-slim as builder

# prevent Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1

# prevent Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1

# install dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc

# lint
RUN pip3 install --upgrade pip
# RUN pip3 install flake8==6.0.0
COPY ./server .
# RUN flake8 --ignore=E501,F401 .

# install python dependencies
COPY ./server/requirements.txt ./app/requirements.txt
RUN pip3 wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt


# pull official base image
FROM python:3.11-slim

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup --system app && adduser --system --group app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME

WORKDIR $APP_HOME

# install dependencies
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /app/requirements.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# copy project
COPY ./server $APP_HOME
COPY --from=base /app/server/templates/client $APP_HOME/templates/client

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
# USER app